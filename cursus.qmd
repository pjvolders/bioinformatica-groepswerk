---
title: "Bio-informatica groepswerk handleiding"
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
  html:
    toc: true
---

# Introductie

Somatische varianten zijn genetische veranderingen die niet overgeërfd zijn, maar tijdens iemands leven in specifieke cellen ontstaan. Deze varianten zijn vooral belangrijk in de context van kanker, waar ze een cruciale rol spelen bij het ontstaan en de progressie van de ziekte.
Het doel van somatische variant calling is om deze niet-geërfde mutaties te identificeren in DNA sequencing data van tumoren en andere stalen. 

Dit proces omvat:

1. Sequencing van tumorweefsel of bloedcellen van een patiënt.
2. Alignment van de sequentiedata aan een referentiegenoom.
3. Identificatie van posities waar de tumorsequentie verschilt van het referentiegenoom. Dit noemen we varianten.
4. Filteren van deze varianten om 

Het belang van somatische variant calling ligt in verschillende gebieden:

- **Kankerdiagnostiek:** Het helpt bij het identificeren van de specifieke mutaties die een rol spelen in een individuele tumor.
- **Gepersonaliseerde behandeling:** Kennis van de somatische varianten kan helpen bij het kiezen van de meest effectieve behandeling voor een patiënt.
- **Onderzoek:** Het draagt bij aan ons begrip van de genetische basis van kanker en andere ziekten.
- **Monitoring:** Het kan worden gebruikt om de evolutie van een tumor in de tijd te volgen en de respons op behandeling te evalueren.

In dit groepswerk doorlopen we de stappen die nodig zijn om somatische variant calling uit te voeren. We leren de basisprincipes van sequentieanalyse en specifieke uitdagingen van het identificeren van somatische mutaties. Hierbij reflecteren we bij elke stap over de verkregen resultaten.

# VSCode op de Vlaamse Supercomputer Centrum infrastructuur

We kunnen de VSC (Vlaamse Supercomputer Centrum) infrastructuur op verschillende manieren gebruiken. De meest gebruiksvriendelijke manier is het *KU Leuven OnDemand* platform. Om in te loggen op dit platform doorloop je volgende stappen:

1. Surf met je browser naar [https://ondemand.hpc.kuleuven.be](https://ondemand.hpc.kuleuven.be/)
2. Kies hier de optie om in te loggen met een VSC account: "Partner organizations: VSC account"
3. Log in met je UHasselt account
4. Bij de vraag "Authorize vsc-challenge?" antwoord je "Authorize"

Je bent nu ingelogd op het *KU Leuven OnDemand* platform. Hiermee kan je vanuit je webbrowser een aantal populaire applicaties opstarten op de Vlaamse SuperComputer. 
Meer achtergrond kan je vinden in de [handleiding](https://docs.vscentrum.be/leuven/services/openondemand.html). 

Voor het groepswerk gaan we gebruik maken van de Visual Studio Code (VS Code) applicatie. Dit is een populaire applicatie om code te schrijven die een ingebouwde bestands browser en *terminal* vensters heeft. Om VS Code te starten via het OnDemand platform doorloop je de volgende stappen.

1. Klik op het "code-server" icoon. 
2. Er verschijnt een formulier met een aantal opties. Controleer volgende opties en pas aan indien nodig.
    - **Account:** lp_h_edu_bioinformatics_2024
    - **Number of hours:** 1
    - **Number of cores:**: 2
    - **Required memory per core in megabytes:**: 3400
3. Klik op "Launch"
4. Een overzicht van jouw recent sessies verschijnt met bovenaan de VS Code sessie met status "Queued"

![Queued](cursus_images/ondemand_queue.png)

Nu moet je even wachten tot de VS Code sessie gestart is. Normaal duurt dit maar enkele seconden. Het zou mogelijk zijn dat je ook wat langer moet wachten als de VSC infrastructuur druk bezet is. Wanneer de sessie gestart is verschijnt "Running" en wordt het kader groen:

![Ready](cursus_images/ondemand_ready.png)

Klik nu op "Connect to Visual Studio Code". De VS Code interface verschijnt.

![Alt text](cursus_images/vscode_home.png)

# Introductie tot Linux Shell/Bash

## Wat is een Shell?

Een shell is een programma dat een interface biedt voor gebruikers om met het besturingssysteem te communiceren. De meest voorkomende shell in Linux-systemen heet Bash (Bourne Again SHell). Wanneer je de opdrachtregel gebruikt, typ je opdrachten in de shell.

## Basisbegrippen

1. **Opdrachtprompt**: Hier typ je je opdrachten. Het eindigt meestal met een `$`-teken.

2. **Opdrachten**: Dit zijn instructies die je aan de computer geeft.

3. **Argumenten**: Aanvullende informatie die je aan een opdracht geeft.

4. **Opties**: Wijzigen het gedrag van opdrachten, meestal beginnend met een streepje (`-`).

## Basisopdrachten

### `pwd` (Print Working Directory)

Toont je huidige locatie in het bestandssysteem.

```bash
$ pwd
/home/gebruikersnaam
```

### `ls` (List)

Geeft een lijst van bestanden en mappen in de huidige directory.

```bash
$ ls
Documenten  Downloads  Afbeeldingen  Muziek
```

Opties:

- `ls -l`: Lang formaat, toont meer details
- `ls -a`: Toont verborgen bestanden (die beginnen met een punt)
- `ls -lh`: Toont de grootte van de bestanden (in de kolom) in een leesbaar formaat (`K`: kilobyte, `M`: megabyte, `G`: gigabyte). 

### `cd` (Change Directory)

Verplaatst je naar een andere directory.

```bash
$ cd Documenten
```

Speciale directories:

- `.` : Huidige directory
- `..`: Bovenliggende directory
- `~` : Thuisdirectory van de gebruiker

### `mkdir` (Make Directory)

Maakt een nieuwe directory aan.

```bash
$ mkdir NieuweMap
```

### `cp` (Copy)

Kopieert bestanden of directories.

```bash
$ cp bestand.txt Documenten/
```

Om een directory en zijn inhoud te kopiëren, gebruik de `-r` (recursief) optie:

```bash
$ cp -r MapA MapB
```

### `mv` (Move)

Verplaatst of hernoemt bestanden en directories.

```bash
$ mv bestand.txt Documenten/
$ mv oudenaam.txt nieuwenaam.txt
```

### `rm` (Remove)

Verwijdert bestanden of directories. Wees voorzichtig met deze opdracht!

```bash
$ rm bestand.txt
```

Om een directory en zijn inhoud te verwijderen, gebruik de `-r` optie:

```bash
$ rm -r MapNaam
```

### `cat` (Concatenate)

Toont de inhoud van een bestand.

```bash
$ cat bestand.txt
```

### `echo`

Print tekst naar het scherm.

```bash
$ echo "Hallo, Wereld!"
Hallo, Wereld!
```

## Opdrachtstructuur

De meeste opdrachten volgen deze structuur:

```
opdracht [opties] [argumenten]
```

Bijvoorbeeld:
```bash
$ ls -l Documenten
```
Hier is `ls` de opdracht, `-l` een optie, en `Documenten` een argument.

## Tips

1. Gebruik de pijltjestoetsen omhoog en omlaag om door je opdrachtgeschiedenis te navigeren.
2. Gebruik Tab voor automatische aanvulling van bestands- en mapnamen.
3. Gebruik `man` gevolgd door een opdrachtnaam om de handleiding te zien (bijv. `man ls`).

## Oefenopdrachten

1. Maak een directory genaamd "BioinformaticaCursus" in je thuisdirectory.
2. Maak binnen "BioinformaticaCursus" drie subdirectories: "Data", "Scripts" en "Resultaten".
3. Maak een leeg bestand genaamd "notities.txt" in de "BioinformaticaCursus" directory.
4. Toon de inhoud van "BioinformaticaCursus" in lang formaat.
5. Verplaats "notities.txt" naar de "Resultaten" directory.
6. Kopieer "notities.txt" van "Resultaten" naar "Data".
7. Verwijder het "notities.txt" bestand uit de "Data" directory.

# 


# Kwaliteitscontrole met FastQC

## Doel
Het hoofddoel van FastQC is om een snelle kwaliteitscontrole uit te voeren op ruwe sequentiedata afkomstig van high-throughput sequencing pijplijnen (FASTQ formaat). Het helpt bij het identificeren van problemen die kunnen voortkomen uit de sequencer zelf of de bibliotheekvoorbereiding. 

## Het FASTQ-formaat

### Wat is FASTQ?
FASTQ is een tekstbestandsformaat voor het opslaan van zowel biologische sequenties (meestal nucleotidesequenties) als hun corresponderende kwaliteitsscores. Het wordt veel gebruikt voor het opslaan van gegevens die afkomstig zijn van sequencing-apparaten.

### Voorbeeld van een FASTQ-entry
```
@SEQ_ID
GATTTGGGGTTCAAAGCAGTATCGATCAAATAGTAAATCCATTTGTTCAACTCACAGTTT
+
!''*((((***+))%%%++)(%%%%).1***-+*''))**55CCF>>>>>>CCCCCCC65
```

### Structuur van een FASTQ-bestand
Een FASTQ-bestand bestaat uit blokken van vier regels per sequentie:

1. Een regelbeginlijn die start met '@', gevolgd door een sequentie-identifier
2. De ruwe sequentiegegevens
3. Een regel die begint met '+', optioneel gevolgd door dezelfde sequentie-identifier
4. De *Phred* kwaliteitsscores voor de sequentie in gecodeerde vorm, één karakter per nucleotide.

Een kwaliteitsscore kan gezien worden als de kans dat de nucleotide op die positie foutief gecalled werd. Zo komt `(` overeen met een kans van 20% op een foutive call. Hoe zuiverder het signaal is de sequencer, hoe zekerder de call. Het staal, de staal- of bibliotheekvoorbereiding en de sequencing(reagentia) kunnen aanleiding geven tot minder kwalitatieve data. Die slechte kwaliteit zal in de verdere bio-informatica analyse resulteren in een slecht of onbetrouwbaar resultaat. Daarom is de eerste stap in een bio-informatica analyse van sequencing data een kwaliteitscontrole op basis van de *Phred* kwaliteitsscores is de FASTQ bestanden. Het FastQC programma berekend samenvattende statistieken over alle entries in een FASTQ bestand en geeft deze weer in een rapport.

## Opdrachten

Voor volgende commando's uit in de VSCode terminal. 

Laad de FastQC module

```bash
module load FastQC/0.11.8-Java-1.8.0_162
```

Voer FastQC uit op één FASTQ read-bestand

```bash
fastqc naam_van_fastq_bestand.fastq.gz
```
> Pas de namen van het FASTQ bestand aan naar de namen van jouw bestanden in het bovenstaande commando.

Het FastQC rapport wordt gegenereerd, dit duurt enkele seconden. Hierna zie je het rapport (bv `naam_van_fastq_bestand_fastqc.html`) verschijnen in de linkerbalk. Om het rapport te openen moeten we het eerst downloaden (rechstklikken + download).

## Het interpreteren van het FastQC HTML-rapport

1. **Basic Statistics**: Geeft een overzicht van het bestand, waaronder totaal aantal sequenties, sequentielengte en GC-gehalte.

2. **Per base sequence quality**: Toont hoe de kwaliteitsscores (Phred scores) verlopen over de lengte van de reads. De blauwe lijn geeft de gemiddelde kwaliteitscore mee over alle reads. Normaal neemt de kwaliteitscore af met de lengte van de reads. Bij een goede gelukte sequencing blijft het gemiddelde ook naar het einde van de reads toe voldoende hoog. 
   - Groen gebied: Goede kwaliteit
   - Oranje gebied: Redelijke kwaliteit
   - Rood gebied: Slechte kwaliteit

3. **Per sequence quality scores**: Geeft de verdeling van kwaliteitsscores over alle sequenties. We verwachten een normale verdeling met een gemiddelde hoger dan 30.

5. **Per base sequentie-inhoud**: Toont de verhoudingen van basen op elke positie.

6. **Per sequentie GC-inhoud**: Vergelijkt de waargenomen GC-inhoudverdeling met een theoretische normale verdeling.

7. **Per base N-inhoud**: Toont het percentage van basen op elke positie die niet konden worden bepaald (N).

8. **Sequentielengteverspreiding**: Voor de meeste platformen zou dit een scherpe piek moeten zijn.

9. **Sequentieduplicatieniveaus**: Hoge duplicatieniveaus kunnen duiden op PCR-bias.

10. **Overgerepresenteerde sequenties**: Lijst van sequenties die vaker voorkomen dan verwacht.

11. **Adapter-inhoud**: Toont de aanwezigheid van vaak gebruikte adapters in je bibliotheek.

## Opdrachtvragen:
1. Hoeveel sequenties/reads zijn er in beide FASTQ files aanwezig?
2. Wat is de gemiddelde kwaliteitsscore over alle basen en reads?
3. Hoe verandert de kwaliteitsscore over de lengte van de reads?

# Read Mapping met BWA

## Doel
BWA (Burrows-Wheeler Aligner) wordt gebruikt om de reads te aligneren tegen een referentiegenoom.

## SAM-formaat (Sequence Alignment/Map)

### Wat is SAM?
SAM is een tekstbestandsformaat voor het opslaan van sequentie-alignments. Het wordt gebruikt om te beschrijven hoe sequenties zijn uitgelijnd ten opzichte van een referentiegenoom.

### Structuur van een SAM-bestand
Een SAM-bestand bestaat uit:
- Een optionele headergedeelte
- Alignment-gedeelte met één regel per alignment

### Voorbeeld van een SAM-entry
```
@HD VN:1.6 SO:coordinate
@SQ SN:ref LN:45
r001   99 ref  7 30 8M2I4M1D3M = 37  39 TTAGATAAAGGATACTG *
```

### Uitleg
- Header: @HD en @SQ lijnen geven informatie over het bestand en de referentiesequentie.
- Alignment: 
  - r001: Identifier van de sequentie uit het FASTQ bestand
  - 99: Bitwise flag
  - ref: Reference sequence name
  - 7: 1-based leftmost mapping position
  - 30: Mapping quality
  - 8M2I4M1D3M: CIGAR string (beschrijft hoe de sequentie is uitgelijnd)
  - =: Reference name of the mate/next read
  - 37: Position of the mate/next read
  - 39: Template length
  - TTAGATAAAGGATACTG: sequentie
  - *: Quality scores (hier niet weergegeven)

## BAM-formaat (Binary Alignment/Map)

### Wat is BAM?
BAM is de binaire versie van het SAM-formaat. Het bevat dezelfde informatie als SAM, maar in een gecomprimeerde, binaire vorm.

### Kenmerken van BAM
- Neemt minder opslagruimte in beslag dan SAM
- Sneller te verwerken door computers
- Kan worden geïndexeerd voor snelle toegang tot specifieke regio's

### Voorbeeld
Omdat BAM een binair formaat is, kunnen we geen leesbaar voorbeeld geven zoals bij SAM. In de praktijk zou je speciale software gebruiken om BAM-bestanden te bekijken of te bewerken.

## Opdrachten
Laad de BWA module
```bash
module load BWA/0.7.17-GCC-10.3.0
```

Aligneer de reads
```bash
REF=/staging/leuven/stg_00156/references/hg38.fa
bwa mem -R '@RG\tID:samplename\tSM:samplename' -t 1 $REF naam_van_fastq_bestand_r1.fastq.gz naam_van_fastq_bestand_r2.fastq.gz > aligned.sam
```
> Pas de namen van de FASTQ bestanden aan naar de namen van jouw bestanden in het bovenstaande commando.



```bash
module load SAMtools/1.13-GCC-10.3.0

samtools sort aligned.sam -o aligned.sorted.bam
samtools index aligned.sorted.bam
```



```bash
samtools flagstat aligned.sorted.bam
```

## Opdrachtvragen:
1. Hoeveel reads zijn er gealigneerd tegen het referentiegenoom?
2. Hoeveel van deze reads vormden een correct paar (beide reads mappen met correct orientatie en afstand op hetzelfde chromosoom)?

# Variant Calling met BCFtools

BCFtools wordt gebruikt om varianten te identificeren uit de uitgelijnde reads.

## 4. VCF-formaat (Variant Call Format)

### Wat is VCF?
VCF is een tekstbestandsformaat voor het opslaan van genoomvariaties zoals SNPs, inserties, deleties en structurele varianten.

### Structuur van een VCF-bestand
Een VCF-bestand bestaat uit:
- Meta-informatieregels (beginnen met ##)
- Een headerregel (begint met #)
- Dataregels met informatie over elke variant

### Voorbeeld van een VCF-entry
```
##fileformat=VCFv4.3
#CHROM POS ID REF ALT QUAL FILTER INFO
20 14370 rs6054257 G A 29 PASS NS=3;DP=14;AF=0.5;DB;H2
```

### Uitleg
- CHROM: Chromosoom
- POS: Positie van de variant
- ID: Variant identifier (bijv. rs-nummer)
- REF: Referentie-allel
- ALT: Alternatief allel
- QUAL: Kwaliteitsscore
- FILTER: Filter status (PASS betekent dat de variant alle filters heeft gepasseerd)
- INFO: Aanvullende informatie over de variant

```bash
# Roep varianten aan
bcftools mpileup -f referentiegenoom.fasta monster1.sorted.bam | bcftools call -mv -Ob -o monster1.raw.bcf

REF=/staging/leuven/stg_00156/references/hg38.fa

module load GATK/4.1.9.0-foss-2018a-Java-11.0.4

gatk Mutect2 \
  -R $REF \
  -I simulated_data_1.sorted.bam \
  -O simulated_data_1.vcf.gz

```

# Variant Filtering

VCFtools kan worden gebruikt om de varianten te filteren op basis van verschillende criteria.

```bash
# Zet BCF om naar VCF
bcftools view monster1.raw.bcf > monster1.raw.vcf

# Filter varianten
vcftools --vcf monster1.raw.vcf \
         --minQ 30 \
         --min-meanDP 10 \
         --max-missing 0.8 \
         --recode --recode-INFO-all \
         --out monster1.gefilterd
```

# Variant Annotatie met SnpEff

```bash
module load snpEff/5.2c-GCCcore-10.3.0-Java-11

SNPEFF_REF=/staging/leuven/stg_00156/references/snpEff

snpEff -dataDir $SNPEFF_REF hg38 input_varianten.vcf > geannoteerde_varianten.vcf
```

```bash


```
## Stap 4: Interpreteer de Resultaten

Kijk naar het `ANN` veld in de output VCF voor gedetailleerde annotaties.

## Opdrachtvragen

1. Hoeveel varianten met HOGE impact heb je gevonden? Wat voor soort varianten zijn dit?
2. Vind een missense variant. Wat is de aminozuurverandering? In welk gen kwam het voor?
3. Zijn er varianten in bekende ziekte-geassocieerde genen?
4. Wat is het meest voorkomende type variant in je dataset?
5. Kun je varianten vinden die de eiwitfunctie kunnen beïnvloeden? Leg uit waarom je denkt dat ze impactvol kunnen zijn.

